/*
	Copyright (c) 2004-2011, The Dojo Foundation All Rights Reserved.
	Available via Academic Free License >= 2.1 OR the modified BSD license.
	see: http://dojotoolkit.org/license for details
*/


dojo._hasResource["dojox.grid.enhanced.plugins.filter._ConditionExpr"]||(dojo._hasResource["dojox.grid.enhanced.plugins.filter._ConditionExpr"]=!0,dojo.provide("dojox.grid.enhanced.plugins.filter._ConditionExpr"),function(){var b=dojox.grid.enhanced.plugins.filter;dojo.declare("dojox.grid.enhanced.plugins.filter._ConditionExpr",null,{_name:"expr",applyRow:function(){throw Error("_ConditionExpr.applyRow: unimplemented interface");},toObject:function(){return{}},getName:function(){return this._name}});
dojo.declare("dojox.grid.enhanced.plugins.filter._DataExpr",b._ConditionExpr,{_name:"data",constructor:function(a,b,d){this._convertArgs=d||{};if(dojo.isFunction(this._convertArgs.convert))this._convertData=dojo.hitch(this._convertArgs.scope,this._convertArgs.convert);b?this._colArg=a:this._value=this._convertData(a,this._convertArgs)},getValue:function(){return this._value},applyRow:function(a,b){return typeof this._colArg=="undefined"?this:new (dojo.getObject(this.declaredClass))(this._convertData(b(a,
this._colArg),this._convertArgs))},_convertData:function(a){return a},toObject:function(){return{op:this.getName(),data:this._colArg===void 0?this._value:this._colArg,isCol:this._colArg!==void 0}}});dojo.declare("dojox.grid.enhanced.plugins.filter._OperatorExpr",b._ConditionExpr,{_name:"operator",constructor:function(){if(dojo.isArray(arguments[0]))this._operands=arguments[0];else{this._operands=[];for(var a=0;a<arguments.length;++a)this._operands.push(arguments[a])}},toObject:function(){return{op:this.getName(),
data:dojo.map(this._operands,function(a){return a.toObject()})}}});dojo.declare("dojox.grid.enhanced.plugins.filter._UniOpExpr",b._OperatorExpr,{_name:"uniOperator",applyRow:function(a,c){if(!(this._operands[0]instanceof b._ConditionExpr))throw Error("_UniOpExpr: operand is not expression.");return this._calculate(this._operands[0],a,c)},_calculate:function(){throw Error("_UniOpExpr._calculate: unimplemented interface");}});dojo.declare("dojox.grid.enhanced.plugins.filter._BiOpExpr",b._OperatorExpr,
{_name:"biOperator",applyRow:function(a,c){if(this._operands[0]instanceof b._ConditionExpr){if(!(this._operands[1]instanceof b._ConditionExpr))throw Error("_BiOpExpr: right operand is not expression.");}else throw Error("_BiOpExpr: left operand is not expression.");return this._calculate(this._operands[0],this._operands[1],a,c)},_calculate:function(){throw Error("_BiOpExpr._calculate: unimplemented interface");}})}());