/*
	Copyright (c) 2004-2011, The Dojo Foundation All Rights Reserved.
	Available via Academic Free License >= 2.1 OR the modified BSD license.
	see: http://dojotoolkit.org/license for details
*/


dojo._hasResource["dijit.tree._dndSelector"]||(dojo._hasResource["dijit.tree._dndSelector"]=!0,dojo.provide("dijit.tree._dndSelector"),dojo.require("dojo.dnd.common"),dojo.require("dijit.tree._dndContainer"),dojo.declare("dijit.tree._dndSelector",dijit.tree._dndContainer,{constructor:function(){this.selection={};this.anchor=null;dijit.setWaiState(this.tree.domNode,"multiselect",!this.singular);this.events.push(dojo.connect(this.tree.domNode,"onmousedown",this,"onMouseDown"),dojo.connect(this.tree.domNode,
"onmouseup",this,"onMouseUp"),dojo.connect(this.tree.domNode,"onmousemove",this,"onMouseMove"))},singular:!1,getSelectedTreeNodes:function(){var a=[],b=this.selection,c;for(c in b)a.push(b[c]);return a},selectNone:function(){this.setSelection([]);return this},destroy:function(){this.inherited(arguments);this.selection=this.anchor=null},addTreeNode:function(a,b){this.setSelection(this.getSelectedTreeNodes().concat([a]));if(b)this.anchor=a;return a},removeTreeNode:function(a){this.setSelection(this._setDifference(this.getSelectedTreeNodes(),
[a]));return a},isTreeNodeSelected:function(a){return a.id&&!!this.selection[a.id]},setSelection:function(a){var b=this.getSelectedTreeNodes();dojo.forEach(this._setDifference(b,a),dojo.hitch(this,function(a){a.setSelected(!1);this.anchor==a&&delete this.anchor;delete this.selection[a.id]}));dojo.forEach(this._setDifference(a,b),dojo.hitch(this,function(a){a.setSelected(!0);this.selection[a.id]=a}));this._updateSelectionProperties()},_setDifference:function(a,b){dojo.forEach(b,function(a){a.__exclude__=
!0});var c=dojo.filter(a,function(a){return!a.__exclude__});dojo.forEach(b,function(a){delete a.__exclude__});return c},_updateSelectionProperties:function(){var a=this.getSelectedTreeNodes(),b=[],c=[];dojo.forEach(a,function(a){c.push(a);b.push(a.getTreePath())});a=dojo.map(c,function(a){return a.item});this.tree._set("paths",b);this.tree._set("path",b[0]||[]);this.tree._set("selectedNodes",c);this.tree._set("selectedNode",c[0]||null);this.tree._set("selectedItems",a);this.tree._set("selectedItem",
a[0]||null)},onMouseDown:function(a){if(this.current&&!this.tree.isExpandoNode(a.target,this.current)&&a.button!=dojo.mouseButtons.RIGHT){dojo.stopEvent(a);var b=this.current,c=dojo.isCopyKey(a),d=b.id;!this.singular&&!a.shiftKey&&this.selection[d]?this._doDeselect=!0:(this._doDeselect=!1,this.userSelect(b,c,a.shiftKey))}},onMouseUp:function(a){if(this._doDeselect)this._doDeselect=!1,this.userSelect(this.current,dojo.isCopyKey(a),a.shiftKey)},onMouseMove:function(){this._doDeselect=!1},userSelect:function(a,
b,c){if(this.singular)this.anchor==a&&b?this.selectNone():(this.setSelection([a]),this.anchor=a);else if(c&&this.anchor){c=this.anchor;dijit.tree._compareNodes(this.anchor.rowNode,a.rowNode)<0?b=c:(b=a,a=c);for(nodes=[];b!=a;)nodes.push(b),b=this.tree._getNextNode(b);nodes.push(a);this.setSelection(nodes)}else this.selection[a.id]&&b?this.removeTreeNode(a):b?this.addTreeNode(a,!0):(this.setSelection([a]),this.anchor=a)},forInSelectedItems:function(a,b){var b=b||dojo.global,c;for(c in this.selection)a.call(b,
this.getItem(c),c,this)}}));